export const LENS_ABI = [
  { type: 'constructor', inputs: [], stateMutability: 'nonpayable' },
  {
    type: 'function',
    name: 'cancelOwnershipHandover',
    inputs: [],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'completeOwnershipHandover',
    inputs: [
      { name: 'pendingOwner', type: 'address', internalType: 'address' },
    ],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'getAccountData',
    inputs: [
      { name: 'twoCrypto', type: 'address', internalType: 'TwoCrypto' },
      { name: 'account', type: 'address', internalType: 'address' },
    ],
    outputs: [
      {
        name: 'data',
        type: 'tuple',
        internalType: 'struct Lens.UserData',
        components: [
          { name: 'targetBalance', type: 'uint256', internalType: 'uint256' },
          { name: 'assetBalance', type: 'uint256', internalType: 'uint256' },
          { name: 'ptBalance', type: 'uint256', internalType: 'uint256' },
          { name: 'ytBalance', type: 'uint256', internalType: 'uint256' },
          { name: 'interest', type: 'uint256', internalType: 'uint256' },
          {
            name: 'rewards',
            type: 'tuple[]',
            internalType: 'struct TokenReward[]',
            components: [
              { name: 'token', type: 'address', internalType: 'address' },
              { name: 'amount', type: 'uint256', internalType: 'uint256' },
            ],
          },
          {
            name: 'lpBalanceInWallet',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'lpBalanceInGauge',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'portfolioInShare',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'portfolioInAsset',
            type: 'uint256',
            internalType: 'uint256',
          },
          { name: 'portfolioInUSD', type: 'uint256', internalType: 'uint256' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getPriceData',
    inputs: [{ name: 'twoCrypto', type: 'address', internalType: 'TwoCrypto' }],
    outputs: [
      {
        name: 'data',
        type: 'tuple',
        internalType: 'struct Lens.PriceData',
        components: [
          { name: 'scale', type: 'uint256', internalType: 'uint256' },
          { name: 'assetPriceInUSD', type: 'uint256', internalType: 'uint256' },
          { name: 'ptPriceInShare', type: 'uint256', internalType: 'uint256' },
          { name: 'ytPriceInShare', type: 'uint256', internalType: 'uint256' },
          { name: 'ptPriceInUSD', type: 'uint256', internalType: 'uint256' },
          { name: 'ytPriceInUSD', type: 'uint256', internalType: 'uint256' },
          { name: 'lpPriceInShare', type: 'uint256', internalType: 'uint256' },
          { name: 'lpPriceInUSD', type: 'uint256', internalType: 'uint256' },
          { name: 'virtualPrice', type: 'uint256', internalType: 'uint256' },
          { name: 'impliedAPY', type: 'int256', internalType: 'int256' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getPriceUSDInWad',
    inputs: [{ name: 'asset', type: 'address', internalType: 'address' }],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getTVL',
    inputs: [{ name: 'twoCrypto', type: 'address', internalType: 'TwoCrypto' }],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct Lens.TVLData',
        components: [
          {
            name: 'trancheTVLInShare',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'trancheTVLInAsset',
            type: 'uint256',
            internalType: 'uint256',
          },
          { name: 'trancheTVLInUSD', type: 'uint256', internalType: 'uint256' },
          { name: 'poolTVLInShare', type: 'uint256', internalType: 'uint256' },
          { name: 'poolTVLInAsset', type: 'uint256', internalType: 'uint256' },
          { name: 'poolTVLInUSD', type: 'uint256', internalType: 'uint256' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getTrancheData',
    inputs: [
      {
        name: 'principalToken',
        type: 'address',
        internalType: 'contract PrincipalToken',
      },
    ],
    outputs: [
      {
        name: 'data',
        type: 'tuple',
        internalType: 'struct Lens.TrancheData',
        components: [
          { name: 'name', type: 'string', internalType: 'string' },
          { name: 'symbol', type: 'string', internalType: 'string' },
          { name: 'factory', type: 'address', internalType: 'address' },
          { name: 'expiry', type: 'uint256', internalType: 'uint256' },
          { name: 'resolver', type: 'address', internalType: 'address' },
          { name: 'yt', type: 'address', internalType: 'address' },
          { name: 'target', type: 'address', internalType: 'address' },
          { name: 'asset', type: 'address', internalType: 'address' },
          { name: 'decimals', type: 'uint256', internalType: 'uint256' },
          { name: 'scale', type: 'uint256', internalType: 'uint256' },
          { name: 'ptTotalSupply', type: 'uint256', internalType: 'uint256' },
          { name: 'ytTotalSupply', type: 'uint256', internalType: 'uint256' },
          { name: 'feePcts', type: 'uint256', internalType: 'FeePcts' },
          {
            name: 'rewardTokens',
            type: 'address[]',
            internalType: 'address[]',
          },
          { name: 'protocolFee', type: 'uint256', internalType: 'uint256' },
          { name: 'curatorFee', type: 'uint256', internalType: 'uint256' },
          {
            name: 'curatorFeeRewards',
            type: 'tuple[]',
            internalType: 'struct TokenReward[]',
            components: [
              { name: 'token', type: 'address', internalType: 'address' },
              { name: 'amount', type: 'uint256', internalType: 'uint256' },
            ],
          },
          {
            name: 'protocolFeeRewards',
            type: 'tuple[]',
            internalType: 'struct TokenReward[]',
            components: [
              { name: 'token', type: 'address', internalType: 'address' },
              { name: 'amount', type: 'uint256', internalType: 'uint256' },
            ],
          },
          { name: 'isExpired', type: 'bool', internalType: 'bool' },
          { name: 'isSettled', type: 'bool', internalType: 'bool' },
          { name: 'paused', type: 'bool', internalType: 'bool' },
          {
            name: 'depositCapInShare',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'depositCapInAsset',
            type: 'uint256',
            internalType: 'uint256',
          },
          { name: 'depositCapInUSD', type: 'uint256', internalType: 'uint256' },
          {
            name: 'maxDepositInShare',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'maxDepositInAsset',
            type: 'uint256',
            internalType: 'uint256',
          },
          { name: 'maxDepositInUSD', type: 'uint256', internalType: 'uint256' },
          {
            name: 'trancheTVLInShare',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'trancheTVLInAsset',
            type: 'uint256',
            internalType: 'uint256',
          },
          { name: 'trancheTVLInUSD', type: 'uint256', internalType: 'uint256' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getTwoCryptoData',
    inputs: [{ name: 'twoCrypto', type: 'address', internalType: 'TwoCrypto' }],
    outputs: [
      {
        name: 'data',
        type: 'tuple',
        internalType: 'struct Lens.TwoCryptoData',
        components: [
          { name: 'name', type: 'string', internalType: 'string' },
          { name: 'symbol', type: 'string', internalType: 'string' },
          { name: 'decimals', type: 'uint256', internalType: 'uint256' },
          { name: 'coin0', type: 'address', internalType: 'address' },
          { name: 'coin1', type: 'address', internalType: 'address' },
          { name: 'balance0', type: 'uint256', internalType: 'uint256' },
          { name: 'balance1', type: 'uint256', internalType: 'uint256' },
          { name: 'totalSupply', type: 'uint256', internalType: 'uint256' },
          { name: 'ptPriceInShare', type: 'uint256', internalType: 'uint256' },
          { name: 'lpPriceInShare', type: 'uint256', internalType: 'uint256' },
          {
            name: 'poolValueInShare',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'poolValueInAsset',
            type: 'uint256',
            internalType: 'uint256',
          },
          { name: 'poolValueInUSD', type: 'uint256', internalType: 'uint256' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'initialize',
    inputs: [
      { name: 'factory', type: 'address', internalType: 'contract Factory' },
      { name: 'feedRegistry', type: 'address', internalType: 'address' },
      { name: 'twoCryptoDeployer', type: 'address', internalType: 'address' },
      { name: 'weth', type: 'address', internalType: 'address' },
      { name: 'owner', type: 'address', internalType: 'address' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'owner',
    inputs: [],
    outputs: [{ name: 'result', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'ownershipHandoverExpiresAt',
    inputs: [
      { name: 'pendingOwner', type: 'address', internalType: 'address' },
    ],
    outputs: [{ name: 'result', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'proxiableUUID',
    inputs: [],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'renounceOwnership',
    inputs: [],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'requestOwnershipHandover',
    inputs: [],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 's_WETH',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 's_factory',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'contract Factory' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 's_feedRegistry',
    inputs: [],
    outputs: [
      { name: '', type: 'address', internalType: 'contract FeedRegistry' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 's_priceOracles',
    inputs: [{ name: 'currency', type: 'address', internalType: 'Currency' }],
    outputs: [
      {
        name: 'oracle',
        type: 'address',
        internalType: 'contract AggregatorV3Interface',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 's_twoCryptoDeployer',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'setFeedRegistry',
    inputs: [
      { name: 'feedRegistry', type: 'address', internalType: 'address' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setPriceOracle',
    inputs: [
      { name: 'currencies', type: 'address[]', internalType: 'Currency[]' },
      { name: 'oracles', type: 'address[]', internalType: 'address[]' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'transferOwnership',
    inputs: [{ name: 'newOwner', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'upgradeToAndCall',
    inputs: [
      { name: 'newImplementation', type: 'address', internalType: 'address' },
      { name: 'data', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'event',
    name: 'Initialized',
    inputs: [
      {
        name: 'version',
        type: 'uint64',
        indexed: false,
        internalType: 'uint64',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'OwnershipHandoverCanceled',
    inputs: [
      {
        name: 'pendingOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'OwnershipHandoverRequested',
    inputs: [
      {
        name: 'pendingOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'OwnershipTransferred',
    inputs: [
      {
        name: 'oldOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'newOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Upgraded',
    inputs: [
      {
        name: 'implementation',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  { type: 'error', name: 'AlreadyInitialized', inputs: [] },
  { type: 'error', name: 'InvalidInitialization', inputs: [] },
  { type: 'error', name: 'Lens_InvalidPrice', inputs: [] },
  { type: 'error', name: 'Lens_LengthMismatch', inputs: [] },
  { type: 'error', name: 'Lens_PriceFeedNotFound', inputs: [] },
  { type: 'error', name: 'NewOwnerIsZeroAddress', inputs: [] },
  { type: 'error', name: 'NoHandoverRequest', inputs: [] },
  { type: 'error', name: 'NotInitializing', inputs: [] },
  { type: 'error', name: 'Unauthorized', inputs: [] },
  { type: 'error', name: 'UnauthorizedCallContext', inputs: [] },
  { type: 'error', name: 'UpgradeFailed', inputs: [] },
  { type: 'error', name: 'Zap_BadPrincipalToken', inputs: [] },
  { type: 'error', name: 'Zap_BadTwoCrypto', inputs: [] },
] as const;
